---
- name: Check if secret already exists
  shell: |
    set -o pipefail; oc get secret {{ ar_osc_common_templates_registry_secret_name }} -n {{ ar_osc_common_templates_registry_secret_namespace }}
  register: secret_stat
  changed_when: false
  failed_when: false

- set_fact:
    comp_str: "Error from server (NotFound): secrets \"{{ ar_osc_common_templates_registry_secret_name }}\" not found"

- set_fact:
    _ar_osc_common_templates_docker_password: "{{ ar_osc_common_templates_registry_password }}"
  when: ar_osc_common_templates_registry_password is defined and ar_osc_common_templates_registry_password != ''

- set_fact:
    _ar_osc_common_templates_docker_password: "{{ ar_osc_common_templates_registry_token }}"
  when: ar_osc_common_templates_registry_token is defined and ar_osc_common_templates_registry_token != ''


- name: Create the secret
  command: oc create secret docker-registry {{ ar_osc_common_templates_registry_secret_name }} \
    -n {{ ar_osc_common_templates_registry_secret_namespace }}
    --docker-server={{ ar_osc_common_templates_registry_server }} \
    --docker-username={{ ar_osc_common_templates_registry_username }} \
    --docker-password={{ _ar_osc_common_templates_docker_password }} \
    --docker-email={{ ar_osc_common_templates_registry_email | default('') }}
  when: comp_str in secret_stat.stderr_lines

- name: Associate secret as 'pull secret' for default user in namespace
  command: oc secrets link -n {{ ar_osc_common_templates_registry_secret_namespace }} default {{ ar_osc_common_templates_registry_secret_name }} --for=pull
  when: comp_str in secret_stat.stderr_lines
